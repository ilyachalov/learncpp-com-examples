// исходный текст программы сохранен в кодировке UTF-8 без BOM

// order-evaluation-expr-error.cpp
// эта программа демонстрирует случай, в котором порядок вычисления выражения
// имеет значение (когда правила приоритетности и ассоциативности уже
// применены, но выражение всё равно имеет несколько вариантов вычисления)

#include <iostream>

int getValue()
{
    std::cout << "Введите целое число: ";
    int x{};
    std::cin >> x;
    return x;
}

int main()
{
    std::cout << getValue() + (getValue() * getValue()) << '\n'; // a + (b * c)

    // Если мы после запуска этой программы вводим числа 1, 2 и 3, то при
    // порядке вычисления функций слева направо мы получим выражение
    // 1 + (2 * 3), которое по правилу приоритетности операторов будет
    // вычислено в значение 7. Однако, стандарт языка C++ не регламентирует
    // порядок вычисления функций в выражении. Поэтому компилятор может
    // вычислить функции в порядке справа налево и мы получим выражение
    // 3 + (2 * 1), которое по правилу приоритетности операторов будет
    // вычислено в значение 5. Таким образом, данная программа содержит
    // ошибку, из-за которой она может давать разный результат после компиляции
    // в разных компиляторах при введении одного и того же набора тестовых
    // данных.

    return 0;
}