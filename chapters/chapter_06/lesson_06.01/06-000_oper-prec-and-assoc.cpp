// исходный текст программы сохранен в кодировке UTF-8 без BOM

// oper-prec-and-assoc.cpp
// простейшие примеры, раскрывающие понятия приоритетности операторов и
// ассоциативности (очередность при равном приоритете операций) операторов

#include <iostream>

int main()
{
    std::cout << 2 + 3 << '\n';       // 5
    std::cout << 4 + 2 * 3 << '\n';   // 10, приоритет умножения выше
    std::cout << 7 - 4 - 1 << '\n';   // 2, ассоциативность: слева направо
    std::cout << (4 + 2) * 3 << '\n'; // 18, скобки меняют приоритет

    // хорошая практика написания кода: использовать скобки для указания
    // приоритетности операторов, даже если технически в этом нет необходимости
    // (в простых случаях, например для операторов +, -, * и / это делать
    // не нужно)

    int x{}, y{};
    x = 0 && 0 || 1;   // не сразу понятна очередность вычисления
    y = (0 && 0) || 1; // то же, что и выше, но очередность вычисления ясна
                       // (второй вариант написания предпочтительнее)
    std::cout << x << '\n'; // 1
    std::cout << y << '\n'; // 1

    x = 0 * 0 + 1;   // очередность вычисления сразу ясна
    y = (0 * 0) + 1; // то же, что и выше, но скобки тут не нужны, и так ясно
                     // (первый вариант написания предпочтительнее)
    std::cout << x << '\n'; // 1
    std::cout << y << '\n'; // 1

    // хорошая практика написания кода: если в выражении только один оператор
    // присваивания, то нет необходимости заключать присваиваемое выражение
    // в скобки

    x = (5 + 8 + 1); // скобки не нужны, присваивание имеет низкий приоритет
    y = 5 + 8 + 1;   // предпочитаемый вариант написания

    x = ((1 || 0) && 0); // внешние скобки не нужны
    y = (1 || 0) && 0;   // предпочитаемый вариант написания

    x = y *= 5;   // тут два оператора присваивания, очередность неясна
    x = (y *= 5); // то же, что и выше, но очередность вычисления ясна
                  // (ассоциативность присваивания: справа налево)
                  // (второй вариант написания предпочтительнее)

    // приоритет оператора вставки << и оператора извлечения >> средний,
    // равен 7, есть операторы с приоритетом меньшим и большим, поэтому
    // в некоторых случаях могут понадобиться скобки

    std::cout << 5 + 8 + 1 << '\n'; // 14, скобки вокруг выражения 5 + 8 + 1
                                    // не нужны (приоритет сложения выше)

    std::cout << 2 || 0 && 0 << '\n'; // 2, будет выведен только первый операнд
                                      // в выражении, так как приоритет
                                      // операторов || и && ниже

    std::cout << '\n'; // в предыдущем утверждении символ '\n' не был выведен

    std::cout << (2 || 0 && 0) << '\n'; // 1, скобки нужны

    return 0;
}